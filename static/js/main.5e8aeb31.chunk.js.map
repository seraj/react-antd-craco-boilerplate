{"version":3,"sources":["styles/theme.ts","styles/themes/darkTheme.ts","styles/themes/lightTheme.ts","pages/layout/Layout.styled.tsx","pages/layout/Layout.tsx","pages/layout/index.ts","components/buttons.tsx","components/styled.tsx","components/antComponents.tsx","App.tsx","index.tsx"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","darkTheme","lightTheme","StyledLayout","styled","SubMenu","Header","Content","Sider","AppLayout","React","memo","children","className","mode","defaultSelectedKeys","Item","width","collapsed","defaultOpenKeys","style","height","borderLeft","icon","VideoCameraOutlined","UserOutlined","title","padding","margin","minHeight","Buttons","onConfirm","e","console","log","success","onCancel","error","okText","cancelText","type","shape","SearchOutlined","StyledContainer","div","Step","AntComponents","current","description","subTitle","storageName","App","useLocalStorage","enabledState","setEnabledState","storageStored","window","localStorage","getItem","prefersDarkMode","useMedia","enabled","useEffect","element","document","classList","add","remove","useDarkMode","darkMode","setDarkMode","checkedChildren","unCheckedChildren","onChange","checked","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5e8aeb31.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    transition: background 0.2s ease-in, color 0.2s ease-in;\n  }\n`;\n","import { DefaultTheme } from \"styled-components\";\n\nconst darkTheme: DefaultTheme = {\n  body: \"#121620\",\n  text: \"#f1f1f1\",\n};\n\nexport { darkTheme };\n","import { DefaultTheme } from \"styled-components\";\n\nconst lightTheme: DefaultTheme = {\n  body: \"#f1f1f1\",\n  text: \"#121620\",\n};\n\nexport { lightTheme };\n","import { Layout } from \"antd\";\nimport styled from \"styled-components\";\n\nconst StyledLayout = styled(Layout)`\n  height: 100vh;\n  .ant-layout {\n    background: ${({ theme }) => theme.body};\n  }\n`;\nexport { StyledLayout };\n","import React from \"react\";\nimport { Layout, Menu, Breadcrumb } from \"antd\";\nimport { UserOutlined, VideoCameraOutlined } from \"@ant-design/icons\";\nimport { StyledLayout } from \"./Layout.styled\";\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst AppLayout = React.memo<Props>(({ children }) => {\n  return (\n    <StyledLayout>\n      <Header className=\"header\">\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\n          <Menu.Item key=\"1\">nav 1</Menu.Item>\n        </Menu>\n      </Header>\n      <Layout>\n        <Sider width={200} collapsed className=\"site-layout-background\">\n          <Menu\n            mode=\"inline\"\n            defaultSelectedKeys={[\"1\"]}\n            defaultOpenKeys={[\"sub1\"]}\n            theme=\"dark\"\n            style={{ height: \"100%\", borderLeft: 0 }}\n          >\n            <Menu.Item key=\"1\" icon={<VideoCameraOutlined />}>\n              nav 2\n            </Menu.Item>\n            <SubMenu key=\"sub2\" icon={<UserOutlined />} title=\"subnav 1\">\n              <Menu.Item key=\"1\">option1</Menu.Item>\n              <Menu.Item key=\"2\">option2</Menu.Item>\n              <Menu.Item key=\"3\">option3</Menu.Item>\n              <Menu.Item key=\"4\">option4</Menu.Item>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Layout style={{ padding: \"0 24px 24px\" }}>\n          <Breadcrumb style={{ margin: \"16px 0\" }}>\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\n            <Breadcrumb.Item>List</Breadcrumb.Item>\n            <Breadcrumb.Item>App</Breadcrumb.Item>\n          </Breadcrumb>\n          <Content\n            className=\"site-layout-background\"\n            style={{\n              padding: 24,\n              margin: 0,\n              minHeight: 280,\n            }}\n          >\n            {children}\n          </Content>\n        </Layout>\n      </Layout>\n    </StyledLayout>\n  );\n});\n\nexport default AppLayout;\n","import AppLayout from \"./Layout\";\n\nexport default AppLayout;\n","import { Button, Tooltip, Spin, Popconfirm, message } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\n\nconst Buttons = () => {\n  function confirm(e: any) {\n    console.log(e);\n    message.success(\"Click on Yes\");\n  }\n\n  function cancel(e: any) {\n    console.log(e);\n    message.error(\"Click on No\");\n  }\n  return (\n    <>\n      <Popconfirm\n        title=\"Are you sure to to this?\"\n        onConfirm={confirm}\n        onCancel={cancel}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button type=\"primary\">POP CONFIRM</Button>\n      </Popconfirm>\n      <Tooltip title=\"search\">\n        <Button type=\"primary\" shape=\"circle\" icon={<SearchOutlined />} />\n      </Tooltip>\n      <Button type=\"primary\" shape=\"circle\">\n        A\n      </Button>\n      <Button type=\"primary\" icon={<SearchOutlined />}>\n        Search\n      </Button>\n      <Tooltip title=\"search\">\n        <Button shape=\"circle\" icon={<SearchOutlined />} />\n      </Tooltip>\n      <Button icon={<SearchOutlined />}>Search</Button>\n      <br />\n      <Tooltip title=\"search\">\n        <Button shape=\"circle\" icon={<SearchOutlined />} />\n      </Tooltip>\n      <Button icon={<SearchOutlined />}>Search</Button>\n      <Tooltip title=\"search\">\n        <Button type=\"dashed\" shape=\"circle\" icon={<SearchOutlined />} />\n      </Tooltip>\n    </>\n  );\n};\nexport default Buttons;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled.div`\n  .ant-btn {\n    margin-right: 8px;\n    margin-bottom: 12px;\n  }\n`;\n","import { Spin, Steps, Divider } from \"antd\";\nimport Buttons from \"./buttons\";\nimport { StyledContainer } from \"./styled\";\nconst { Step } = Steps;\n\nconst AntComponents = () => {\n  return (\n    <StyledContainer>\n      <Buttons />\n      <Divider />\n      <Spin />\n      <Divider />\n      <Steps current={1}>\n        <Step title=\"Finished\" description=\"This is a description.\" />\n        <Step\n          title=\"In Progress\"\n          subTitle=\"Left 00:00:08\"\n          description=\"This is a description.\"\n        />\n        <Step title=\"Waiting\" description=\"This is a description.\" />\n      </Steps>\n    </StyledContainer>\n  );\n};\n\nexport default AntComponents;\n","import { useEffect } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { ConfigProvider, Switch } from \"antd\";\nimport { useLocalStorage, useMedia } from \"@svahdati/usehooks\";\nimport { GlobalStyles } from \"./styles/theme\";\nimport { darkTheme, lightTheme } from \"./styles/themes\";\nimport AppLayout from \"./pages/layout\";\nimport AntComponents from \"./components/antComponents\";\nconst App = () => {\n  const [darkMode, setDarkMode] = useDarkMode();\n\n  return (\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\n      <>\n        <GlobalStyles />\n        <ConfigProvider>\n          <AppLayout>\n            <Switch\n              checkedChildren=\"☾\"\n              unCheckedChildren=\"☀\"\n              onChange={() => setDarkMode((darkMode) => !darkMode)}\n              checked={darkMode}\n            />\n            <br />\n            <br />\n            <AntComponents />\n          </AppLayout>\n        </ConfigProvider>\n      </>\n    </ThemeProvider>\n  );\n};\n\nconst storageName = \"dark-mode\";\n\nfunction useDarkMode() {\n  const [enabledState, setEnabledState] = useLocalStorage<boolean>(\n    storageName,\n    false\n  );\n  const storageStored = window.localStorage.getItem(storageName);\n  const prefersDarkMode = usePrefersDarkMode();\n  const enabled = storageStored ? enabledState : prefersDarkMode;\n\n  useEffect(() => {\n    console.log(prefersDarkMode);\n    if (prefersDarkMode && !storageStored) {\n      setEnabledState(true);\n    } else if (storageStored) {\n      setEnabledState(false);\n    }\n  }, [prefersDarkMode]);\n\n  useEffect(() => {\n    const className = \"dark\";\n    const element = window.document.body;\n    if (enabled) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }, [enabled]);\n\n  return [enabled, setEnabledState] as const;\n}\n\nfunction usePrefersDarkMode() {\n  return useMedia<boolean>([\"(prefers-color-scheme: dark)\"], [true], false);\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}